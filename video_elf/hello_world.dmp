######## ELF FILE #########
# 64 FORMAT DO NOT FORGET IT'S HEXA NOT DEC
7F 45 4C 46  # 0 - 3 Magic Number ELF
02  # 4 - Class: 1 = 32-bit
01  # 5 - Endianness: 1 = Little Endian
01  # 6 - ELF Version: 1 = original version
00  # 7 - ABI: 0 = System V
00 00 00 00 00 00 00 00  # 8-15 - Padding
#no change
02 00  # 16-17 - Type: 2 = Executable file
3E 00  # 18-19 - Machine: 3 = x86
00 00 00 00  # 20-23 - Version: 1 = original version
7F 00 40 00 00 00 00 00 # 24-27 - Entry point address
40 00 00 00 00 00 00 00 # 28-31 - Start of program headers
00 00 00 00 00 00 00 00 # 32-35 - Start of section headers (unused)
00 00 00 00  # 36-39 - Flags
40 00  # 40-41 - Size of this header
38 00  # 42-43 - Size of program headers
01 00  # 44-45 - Number of program headers
40 00  # 46-47 - Size of section headers (unused)
00 00  # 48-49 - Number of section headers (unused)
00 00  # 50-51 - Section header string table index (unused)

# ca stop ici


01 00 00 00  # 0-3 - Type: 1 = Loadable segment
05 00 00 00  # Segment-dependent flags (position for 64-bit structure).
78 00 00 00 00 00 00 00 # p_offset
78 00 40 00 00 00 00 00 # p_vaddr
78 00 40 00 00 00 00 00 # p_paddr

2C 00 00 00 00 00 00 00 # p_filesz
2C 00 00 00 00 00 00 00 # p_memsz
08 00 00 00 00 00 00 00 # p_align
# fin prof header
#
48 65 6c 6c 6f 21 0a # string hello world de len 13

B8 # mov rax (32 bit)
01 00 00 00 # on deplace 1 dans rax dcp
BF # mov rdi (32 bit)
01 00 00 00 # on deplace 1 dans rdi stdout quoi
48 BE # mov rsi, 64 bit pointeur
78 00 40 00 00 00 00 00 # virtual adresse de hello world
BA # mov rdx (32 bit)
07 00 00 00 # on deplace la len donc 13
0F 05 # syscall
B8 # mov rax (32 bit)
3C 00 00 00 # 60 dans rax ou 3C
48 31 FF # xor rdx rdx
0F 05 # syscall


